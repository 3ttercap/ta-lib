import chai from 'chai'
import Big from 'big.js'
const { assert } = chai

import ema from './index'

export default () => {
  describe('Input', () => {
    it('should throw error with wrong timeperiod param', () => {
      assert.throws(ema.bind(null, [], null), Error, 'Timeperiod should be an instance of Big or string!')
    })
    it('should throw error with wrong values', () => {
      assert.throws(ema.bind(null, [null], '1'), Error, 'Input value should be an instance of Big or NaN!')
    })
  })
  describe('output', () => {
    let input = ['45.73', '46.14', '46.36', '46.85', '46.92', '47.23', '46.86', '47.45', '47.61', '46.59', '46.9', '47.42', '47.58', '47.58', '48.01', '48.3', '48.72', '47.63', '47.35', '47.37', '47.75', '46.7', '46.28', '47.6', '48.24', '48.66', '48.64', '49.06', '49.16', '48.03', '47.87', '43.34', '42.99', '42.64', '42.91', '41.62', '42.16', '42.26', '41.65', '41.76', '41.72', '41.48', '41.42', '41.53', '41.55', '40.29', '40.72', '40.66', '40.96', '40.97', '41.21', '41.46', '42.9', '42.86', '42.88', '42.29', '42.5', '41.7', '41.56']
    let output = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, '46.8383333333333', '46.9524358974359', '47.0489842209073', '47.1968328023062', '47.3665508327206', '47.5747737815328', '47.5832701228355', '47.5473824116300', '47.5200928098408', '47.5554631467884', '47.4238534318978', '47.2478759808366', '47.3020489068618', '47.4463490750369', '47.6330646019543', '47.7879777401152', '47.9836734724051', '48.1646467843428', '48.1439318944439', '48.1017885260679', '47.3692056759036', '46.6954817257646', '46.0715614602624', '45.5851673894528', '44.9751416372293', '44.5420429238094', '44.1909593970695', '43.8000425667511', '43.4861898641740', '43.2144683466088', '42.9476270625151', '42.7126075144359', '42.5306678968303', '42.3797959127026', '42.0582888492099', '41.8523982570238', '41.6689523713278', '41.5598827757389', '41.4691315794714', '41.4292651826296', '41.4339936160712', '41.6595330597526', '41.8442202813291', '42.0035710072785', '42.0476370061587', '42.1172313129035', '42.0530418801491', '41.9771892832031']
    input = input.map(Big)
    let result = ema(input, '12')
    it('should return an array', () => {
      assert.isTrue(Array.isArray(result))
    })
    it('should return correct values', () => {
      for (let i = 0; i < input.length; ++i) {
        assert.isTrue(isNaN(result[i]) ? isNaN(output[i]) : result[i].toFixed(13) === output[i])
      }
    })
    it('should skip NaN', () => {
      let input = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, '0.331910755800', '0.387650104788', '0.460407143398', '0.520140924151', '0.470870912785', '0.414139468976', '0.003604697115', '-0.346000662003', '-0.643885195078', '-0.848394328455', '-1.101859953426', '-1.244810400871', '-1.334645533190', '-1.438480516823', '-1.494664842839', '-1.524841567292', '-1.550252487393', '-1.557280957701', '-1.536265873667', '-1.500698319239', '-1.556242847033', '-1.547723683942', '-1.528197574011', '-1.471552358834', '-1.409604656244', '-1.325860961551', '-1.225197258170', '-1.017495527508', '-0.846361743912', '-0.701041979056', '-0.626263907114', '-0.543788051238', '-0.536790864426', '-0.536359554367']
      let output = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,'0.17764868332578','-0.02755991903038','-0.24241992590950','-0.44289802090180','-0.62124752335944','-0.78469412205215','-0.92668826620952','-1.04631892642602','-1.14710563861941','-1.22914070243573','-1.29056573668199','-1.33259225319339','-1.37732237196131','-1.41140263435745','-1.43476162228816','-1.44211976959733','-1.43561674692666','-1.41366558985153','-1.37597192351522','-1.30427664431378','-1.21269366423342','-1.11036332719794','-1.01354344318115','-0.91959236479252','-0.84303206471922','-0.78169756264877']
      input = input.map(i => isNaN(i) ? NaN : Big(i))
      let result = ema(input, '9')
      for (let i = 0; i < input.length; ++i) {
        assert.isTrue(isNaN(result[i]) ? isNaN(output[i]) : result[i].toFixed(14) === output[i])
      }
    })
  })
}
