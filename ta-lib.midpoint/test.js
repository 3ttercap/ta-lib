import chai from 'chai'
const { assert } = chai

import midpoint from './index'

export default () => {
  describe('Input', () => {
    it('should throw error with wrong input', () => {
      assert.throws(midpoint.bind(null, null, 10), Error, 'Input should be an array!')
    })
    it('should throw error with empty array', () => {
      assert.throws(midpoint.bind(null, [], 10), Error, 'Input should not be an empty array!')
    })
    it('should throw error with wrong value', () => {
      assert.throws(midpoint.bind(null, [null], 10), Error, 'Input value should be a number!')
    })
    it('should throw error with wrong timeperiod', () => {
      assert.throws(midpoint.bind(null, [10], null), Error, 'Timeperiod should be a number!')
    })
  })
  describe('output', () => {
    let input = [11.1046609608, 11.5659191366, 12.0541752968, 14.2852327856, 6.7807300831, 14.9893895537, 9.5154948346, 14.4104527473, 5.8120197593, 9.1135072778, 13.1126672332, 5.8565617586, 5.2755132481, 9.7592308978, 10.5477753188, 6.4418588625, 11.0974658723, 6.5187928732, 14.3838314991, 8.9874850027, 11.1076056398, 6.9437655481, 13.7053019623, 8.0366444308, 8.9964169450, 7.0156002929, 12.6715270011, 11.8183506397, 9.6803516313, 9.4285369106, 5.6904957700, 12.5643221149, 6.7521860427, 11.8939076434, 11.5596875618, 11.4339758968, 7.6208956586, 12.0746098063, 7.9301937390]
    let output = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, 10.4007046565, 10.4007046565, 10.4007046565, 10.1324514009, 10.1324514009, 10.1324514009, 9.8429829977, 9.8429829977, 9.1940902406, 9.8296723736, 9.8296723736, 9.8296723736, 9.8296723736, 10.4128451808, 10.4128451808, 10.4128451808, 10.4513121862, 10.4513121862, 10.6637985236, 10.3245337552, 10.3245337552, 9.6978988661, 9.6978988661, 9.1810113855, 9.1810113855, 9.1810113855, 9.1810113855, 9.1274089424, 9.1274089424, 9.1274089424]
    let result = midpoint(input, 10)
    it('should return an array', () => {
      assert.isTrue(Array.isArray(result))
    })
    it('should return correct values', () => {
      for (let i = 0; i < input.length; ++i) {
        let delta = Math.abs(result[i] - output[i])
        let equal = isNaN(delta) ? true : delta < 0.0001
        assert.isTrue(equal)
      }
    })
    it('should skip NaN', () => {
      let input = [NaN, 11.1046609608, 11.5659191366, 12.0541752968, 14.2852327856, 6.7807300831, 14.9893895537, 9.5154948346, 14.4104527473, 5.8120197593, 9.1135072778, 13.1126672332, 5.8565617586, 5.2755132481, 9.7592308978, 10.5477753188, 6.4418588625, 11.0974658723, 6.5187928732, 14.3838314991, 8.9874850027, 11.1076056398, 6.9437655481, 13.7053019623, 8.0366444308, 8.9964169450, 7.0156002929, 12.6715270011, 11.8183506397, 9.6803516313, 9.4285369106, 5.6904957700, 12.5643221149, 6.7521860427, 11.8939076434, 11.5596875618, 11.4339758968, 7.6208956586, 12.0746098063, 7.9301937390]
      let output = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, 10.4007046565, 10.4007046565, 10.4007046565, 10.1324514009, 10.1324514009, 10.1324514009, 9.8429829977, 9.8429829977, 9.1940902406, 9.8296723736, 9.8296723736, 9.8296723736, 9.8296723736, 10.4128451808, 10.4128451808, 10.4128451808, 10.4513121862, 10.4513121862, 10.6637985236, 10.3245337552, 10.3245337552, 9.6978988661, 9.6978988661, 9.1810113855, 9.1810113855, 9.1810113855, 9.1810113855, 9.1274089424, 9.1274089424, 9.1274089424]
      let result = midpoint(input, 10)
      for (let i = 0; i < input.length; ++i) {
        let delta = Math.abs(result[i] - output[i])
        let equal = isNaN(delta) ? true : delta < 0.00001
        assert.isTrue(equal)
      }
    })
  })
}
