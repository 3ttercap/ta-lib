import chai from 'chai'
import Big from 'big.js'
const { assert } = chai

import eratio from './index'

export default () => {
  describe('Input', () => {
    it('should throw error with wrong timeperiod param', () => {
      assert.throws(eratio.bind(null, [], null), Error, 'Timeperiod should be an instance of Big or string!')
    })
    it('should throw error with wrong values', () => {
      assert.throws(eratio.bind(null, [null], '1'), Error, 'Input value should be an instance of Big or NaN!')
    })
  })
  describe('output', () => {
    let input = ['110.46', '109.8', '110.17', '109.82', '110.15', '109.31', '109.05', '107.94', '107.76', '109.24', '109.4', '108.5', '107.96', '108.55', '108.85', '110.44', '109.89', '110.7', '110.79', '110.22', '110', '109.27', '106.69', '107.07', '107.92', '107.95', '107.7', '107.97', '106.09', '106.03', '107.65', '109.54', '110.26', '110.38', '111.94', '113.59', '113.98', '113.91', '112.62', '112.2', '111.1', '110.18', '111.13', '111.55', '112.08', '111.95', '111.6', '111.39', '112.25']
    input = input.map(Big)
    let output = ["NaN", "NaN", "NaN", "NaN", "NaN", "NaN", "NaN", "NaN", "NaN", "NaN", "0.184668989547038", "0.217391304347826", "0.359349593495935", "0.198748043818466", "0.204402515723270", "0.158931082981716", "0.113513513513514", "0.388732394366197", "0.432239657631954", "0.160655737704918", "0.097402597402597", "0.128547579298831", "0.158156911581569", "0.189258312020460", "0.111111111111111", "0.365638766519824", "0.336405529953917", "0.457286432160804", "0.605670103092784", "0.577931034482759", "0.271676300578035", "0.027522935779817", "0.449056603773585", "0.430429128738622", "0.478571428571429", "0.562874251497006", "0.618110236220472", "0.596385542168675", "0.696905016008538", "0.634121274409044", "0.374592833876221", "0.077669902912621", "0.102715466351830", "0.133409350057013", "0.018087855297158", "0.263665594855305", "0.385113268608414", "0.398734177215190", "0.062818336162988"]
    let result = eratio(input, '10')

    it('should return an array', () => {
      assert.isTrue(Array.isArray(result))
    })
    it('should return correct values', () => {
      for (let i = 0; i < input.length; ++i) {
        assert.isTrue(result[i].toFixed(15) === output[i])
      }
    })
  })
}
